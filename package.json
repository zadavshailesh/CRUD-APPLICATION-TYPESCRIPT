select * from employees
select * from projects
select * from employees_per_projects

CREATE OR REPLACE FUNCTION totalRecords ()
RETURNS integer AS $total$
declare
	total integer;
BEGIN
   SELECT count(*) into total FROM employees_per_projects;
   RETURN total;
END;
$total$ LANGUAGE plpgsql;

select totalRecords();



DROP FUNCTION get_employee_detail(integer);
CREATE OR REPLACE FUNCTION get_employee_detail(employee_id integer)
RETURNS TABLE (
employeeid integer,
name varchar,
address varchar,
projectid integer,
projectcode varchar,
projectName varchar
)
AS
$$
BEGIN
RETURN QUERY 
SELECT
e.id,
e.name,
e.address,
p.projectid,
p.code,
p.name
FROM 
employees e
left JOIN employees_per_projects t ON e.id = t.employeeid
left JOIN projects p ON p.projectid=t.projectid
WHERE 
e.id=employee_id;
END;
$$ LANGUAGE plpgsql;

select * from  get_employee_detail(1);







CREATE OR REPLACE FUNCTION getAllEmployeeDetails()
RETURNS TABLE (
employeeid integer,
name varchar,
address varchar,
projectid integer,
projectcode varchar,
projectName varchar
)
AS
$$
BEGIN
RETURN QUERY 
SELECT
e.id,
e.name,
e.address,
p.projectid,
p.code,
p.name
FROM 
employees e
left JOIN employees_per_projects t ON e.id = t.employeeid
left JOIN projects p ON p.projectid=t.projectid;

END;
$$ LANGUAGE plpgsql;


select * from getAllEmployeeDetails();

SELECT
e.id,
e.name,
e.address,
p.projectid,
p.code,
p.name
FROM 
employees e
left JOIN employees_per_projects t ON e.id = t.employeeid
left JOIN projects p ON p.projectid=t.projectid
WHERE 
e.id=100;

	
	







